# Logged-in users
map $http_cookie $is_logged_in {
    default 0;
    # custom_logged_in_ is my custom login cookie prefix, change to yours or remove if not needed
    ~*(?:custom_logged_in_|wordpress_logged_in_) 1;
#    ~*wordpress_logged_in_= 1;   # otherwise should be just this if no custom cookies perfix is set
}

# WooCommerce carts/sessions (treat as uncacheable too)
map $http_cookie $has_cart {
    default 0;
    ~*woocommerce_items_in_cart= 1;
    ~*woocommerce_cart_hash=    1;
}

# Combine to determine if we should skip cache
map "$is_logged_in$has_cart" $skip_cache {
    default 0;   # anonymous
    10      1;   # logged in
    01      1;   # cart
    11      1;   # both
}
map $skip_cache $page_cc {
    0 "public, s-maxage=3600, max-age=0, stale-while-revalidate=30, stale-if-error=86400";
    1 "private, no-store";
}
server {
    listen 80;
    listen [::]:80;
    server_name example.com www.example.com;
    # no-autoindex.conf disables directory listings globally
    include /etc/nginx/snippets/no-autoindex.conf;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name example.com www.example.com;
    # no-autoindex.conf disables directory listings globally
    include /etc/nginx/snippets/no-autoindex.conf;
    # Custom configs from plugins/themes

    root /var/www/blog/public;
    index index.php index.html;

    ssl_certificate     /etc/letsencrypt/live/example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;

    # TLS (start with Mozilla "Intermediate"; tune later)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    # For a full, current cipher suite & hardening, generate from Mozillaâ€™s tool.
    # https://ssl-config.mozilla.org/  (choose: nginx, Intermediate)
    # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    # add_header X-Powered-By "Abdessalam's Engine 1.0" always; # set if needed
    # add_header Permissions-Policy "geolocation=(), microphone=()" always; # set if needed
    # adjust as needed
    client_max_body_size 64m; 
    # PHP via PHP-FPM 8.3 with CDN-friendly real IP headers
    location ~ \.php$ {
        try_files $uri @wp_404;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param REMOTE_ADDR $remote_addr;
        # The following are commented out, but you can enable if you use a CDN or reverse proxy
        # fastcgi_param HTTP_X_FORWARDED_FOR $remote_addr;
        # fastcgi_param HTTP_CLIENT_IP       $remote_addr;
        # fastcgi_param X-Real-IP            $remote_addr;
        # fastcgi_param HTTP_X_REAL_IP       $remote_addr;
        fastcgi_pass unix:/run/php/php8.3-fpm.sock;
        fastcgi_buffers 16 64k;
        fastcgi_buffer_size 128k;
        fastcgi_hide_header X-Powered-By;
        proxy_hide_header   X-Powered-By;
        error_page 404 = @wp_404;
    }
    # WordPress permalinks
    location / {
        try_files $uri $uri/ /index.php$is_args$args;
    }
    # Cache static assets with far-future expires (1 year)
    location ~* \.(?:css|js|mjs|map|jpg|jpeg|gif|png|svg|webp|ico|ttf|otf|woff2?)$ {
        expires 1y;
        add_header Cache-Control "public, max-age=31536000, immutable";
    }
    # Use a harmless status (418) to trigger an internal redirect to WP's front controller
    error_page 404 418 = @wp_404;

    # Named location: hand off to PHP-FPM running WordPress
    # 404 handled by WordPress (so themes/plugins can customize it)
    location @wp_404 {
        internal;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root/index.php;
        fastcgi_param REQUEST_URI $request_uri;
        fastcgi_param QUERY_STRING $query_string;
        fastcgi_param DOCUMENT_URI /index.php;
        fastcgi_pass unix:/run/php/php8.3-fpm.sock;
    }
    # Block dotfiles (still allow ACME challenges)
    location ~ /\.(?!well-known) {
        return 418;   # internally renders WP 404
    }
    # Block any .conf file accesses
    location ~* \.conf(?:$|/) {
        return 418;
    }
    # Block PHP in uploads
    location ~* /wp-content/uploads/.*\.php$ {
        return 418;
    }
    #  Exclude from logs
    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }
    # Never expose the following files and Return WP 404 instead of the Generic NGINX 403/404
    if ($request_uri ~* (^|/)(wp-config-sample\.php|wp-admin/install\.php|readme\.html|readme\.txt|install\.php|license\.txt|php\.ini|hidemywp\.conf|bb-config\.php|error_log|debug\.log)(/|$)) {
        return 418;
    }
    location ~* (^|/)wp-config\.php(?:$|/) {
        return 418;
    }
}